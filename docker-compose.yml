services:
  agent-trading:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    platform: linux/amd64
    container_name: agent-trading-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agent_trading
      # Trading cycle configuration - 30 minutes for Bayesian analysis
      - TRADING_CYCLE_INTERVAL=1800
      # Advanced frameworks configuration - optimized for 6-core CPU
      - OMP_NUM_THREADS=4
      - OPENBLAS_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - NUMBA_NUM_THREADS=4
      - PYTHONPATH=/app
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./cache:/app/cache:rw
      - ./backups:/app/backups
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - agent-trading-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.path.append('/app'); from src.environment import validate_environment; status = validate_environment(); exit(0 if status['status'] == 'healthy' else 1)"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
      args:
        - BUILDKIT_INLINE_CACHE=1
    platform: linux/amd64
    container_name: agent-trading-dashboard
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=production
      - GUNICORN_WORKERS=4
      - GUNICORN_TIMEOUT=60
      # LLM Configuration
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_BASE_URL=${LLM_BASE_URL:-https://api.openai.com/v1}
      - LLM_MODEL=${LLM_MODEL:-gpt-4}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.3}
      # Binance Configuration
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - TRADING_SYMBOL=${TRADING_SYMBOL:-BTCUSDT}
      - TIMEFRAME=${TIMEFRAME:-15m}
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agent_trading
      - REDIS_URL=redis://redis:6379
      # Risk Management
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-10000}
      - MAX_DAILY_LOSS=${MAX_DAILY_LOSS:-5000}
      - VAR_LIMIT=${VAR_LIMIT:-2000}
      - CONCENTRATION_LIMIT=${CONCENTRATION_LIMIT:-0.2}
      # Advanced frameworks
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./cache:/app/cache:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-trading-network
    command: >
      /bin/sh -c '
        echo "Waiting for trading agent to complete first cycle...";
        while [ ! -f /app/data/latest_market_data.json ]; do sleep 5; done;
        echo "First data file detected, starting dashboard...";
        exec gunicorn --bind 0.0.0.0:8080 --workers 1 --timeout 180 --access-logfile - dashboard_api:app
      '
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: agent-trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-trading-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: agent-trading-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agent_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
      # Performance optimization
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=16MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - agent-trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agent_trading"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.3'

  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: agent-trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - agent-trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: agent-trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - agent-trading-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agent-trading-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

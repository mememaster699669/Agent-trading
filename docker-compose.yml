services:
  agent-trading:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: agent-trading-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agent_trading
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    depends_on:
      - redis
      - postgres
    networks:
      - agent-trading-network
    healthcheck:
      test: ["CMD", "python", "-c", "print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    platform: linux/amd64
    container_name: agent-trading-dashboard
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=production
      # LLM Configuration
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_BASE_URL=${LLM_BASE_URL:-https://api.openai.com/v1}
      - LLM_MODEL=${LLM_MODEL:-gpt-4}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.3}
      # Binance Configuration
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - TRADING_SYMBOL=${TRADING_SYMBOL:-BTCUSDT}
      - TIMEFRAME=${TIMEFRAME:-15m}
      # Database Configuration (Docker service names)
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/agent_trading
      - REDIS_URL=redis://redis:6379
      # Risk Management
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-10000}
      - MAX_DAILY_LOSS=${MAX_DAILY_LOSS:-5000}
      - VAR_LIMIT=${VAR_LIMIT:-2000}
      - CONCENTRATION_LIMIT=${CONCENTRATION_LIMIT:-0.2}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - agent-trading
      - postgres
      - redis
    networks:
      - agent-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: agent-trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agent-trading-network
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: agent-trading-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=agent_trading
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agent-trading-network

  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: agent-trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - agent-trading-network

  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: agent-trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - agent-trading-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  agent-trading-network:
    driver: bridge
